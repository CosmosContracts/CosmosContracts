// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: juno/clock/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryClockContracts is the request type to get all contracts.
type QueryClockContracts struct {
}

func (m *QueryClockContracts) Reset()         { *m = QueryClockContracts{} }
func (m *QueryClockContracts) String() string { return proto.CompactTextString(m) }
func (*QueryClockContracts) ProtoMessage()    {}
func (*QueryClockContracts) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{0}
}
func (m *QueryClockContracts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClockContracts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClockContracts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClockContracts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClockContracts.Merge(m, src)
}
func (m *QueryClockContracts) XXX_Size() int {
	return m.Size()
}
func (m *QueryClockContracts) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClockContracts.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClockContracts proto.InternalMessageInfo

// QueryClockContractsResponse is the response type for the Query/ClockContracts RPC method.
type QueryClockContractsResponse struct {
	ContractAddresses []string `protobuf:"bytes,1,rep,name=contract_addresses,json=contractAddresses,proto3" json:"contract_addresses,omitempty" yaml:"contract_addresses"`
}

func (m *QueryClockContractsResponse) Reset()         { *m = QueryClockContractsResponse{} }
func (m *QueryClockContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClockContractsResponse) ProtoMessage()    {}
func (*QueryClockContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{1}
}
func (m *QueryClockContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClockContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClockContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClockContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClockContractsResponse.Merge(m, src)
}
func (m *QueryClockContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClockContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClockContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClockContractsResponse proto.InternalMessageInfo

func (m *QueryClockContractsResponse) GetContractAddresses() []string {
	if m != nil {
		return m.ContractAddresses
	}
	return nil
}

// QueryJailedClockContracts is the request type to get all jailed contracts.
type QueryJailedClockContracts struct {
}

func (m *QueryJailedClockContracts) Reset()         { *m = QueryJailedClockContracts{} }
func (m *QueryJailedClockContracts) String() string { return proto.CompactTextString(m) }
func (*QueryJailedClockContracts) ProtoMessage()    {}
func (*QueryJailedClockContracts) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{2}
}
func (m *QueryJailedClockContracts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryJailedClockContracts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryJailedClockContracts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryJailedClockContracts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJailedClockContracts.Merge(m, src)
}
func (m *QueryJailedClockContracts) XXX_Size() int {
	return m.Size()
}
func (m *QueryJailedClockContracts) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJailedClockContracts.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJailedClockContracts proto.InternalMessageInfo

// QueryJailedClockContractsResponse is the response type for the Query/JailedClockContracts RPC method.
type QueryJailedClockContractsResponse struct {
	JailedContractAddresses []string `protobuf:"bytes,1,rep,name=jailed_contract_addresses,json=jailedContractAddresses,proto3" json:"contract_addresses,omitempty" yaml:"contract_addresses"`
}

func (m *QueryJailedClockContractsResponse) Reset()         { *m = QueryJailedClockContractsResponse{} }
func (m *QueryJailedClockContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryJailedClockContractsResponse) ProtoMessage()    {}
func (*QueryJailedClockContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{3}
}
func (m *QueryJailedClockContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryJailedClockContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryJailedClockContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryJailedClockContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJailedClockContractsResponse.Merge(m, src)
}
func (m *QueryJailedClockContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryJailedClockContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJailedClockContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJailedClockContractsResponse proto.InternalMessageInfo

func (m *QueryJailedClockContractsResponse) GetJailedContractAddresses() []string {
	if m != nil {
		return m.JailedContractAddresses
	}
	return nil
}

// QueryClockContract is the request type to get a single contract.
type QueryClockContract struct {
	// contract_address is the address of the contract to query.
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryClockContract) Reset()         { *m = QueryClockContract{} }
func (m *QueryClockContract) String() string { return proto.CompactTextString(m) }
func (*QueryClockContract) ProtoMessage()    {}
func (*QueryClockContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{4}
}
func (m *QueryClockContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClockContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClockContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClockContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClockContract.Merge(m, src)
}
func (m *QueryClockContract) XXX_Size() int {
	return m.Size()
}
func (m *QueryClockContract) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClockContract.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClockContract proto.InternalMessageInfo

func (m *QueryClockContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryClockContractResponse is the response type for the Query/ClockContract RPC method.
type QueryClockContractResponse struct {
	// contract is the contract with the given address.
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// is_jailed is the jailed status of the contract.
	IsJailed bool `protobuf:"varint,2,opt,name=is_jailed,json=isJailed,proto3" json:"is_jailed,omitempty"`
}

func (m *QueryClockContractResponse) Reset()         { *m = QueryClockContractResponse{} }
func (m *QueryClockContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClockContractResponse) ProtoMessage()    {}
func (*QueryClockContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{5}
}
func (m *QueryClockContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClockContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClockContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClockContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClockContractResponse.Merge(m, src)
}
func (m *QueryClockContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClockContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClockContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClockContractResponse proto.InternalMessageInfo

func (m *QueryClockContractResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryClockContractResponse) GetIsJailed() bool {
	if m != nil {
		return m.IsJailed
	}
	return false
}

// QueryParams is the request type to get all module params.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryClockContractsResponse is the response type for the Query/ClockContracts RPC method.
type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da208f579d775c8, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryClockContracts)(nil), "juno.clock.v1.QueryClockContracts")
	proto.RegisterType((*QueryClockContractsResponse)(nil), "juno.clock.v1.QueryClockContractsResponse")
	proto.RegisterType((*QueryJailedClockContracts)(nil), "juno.clock.v1.QueryJailedClockContracts")
	proto.RegisterType((*QueryJailedClockContractsResponse)(nil), "juno.clock.v1.QueryJailedClockContractsResponse")
	proto.RegisterType((*QueryClockContract)(nil), "juno.clock.v1.QueryClockContract")
	proto.RegisterType((*QueryClockContractResponse)(nil), "juno.clock.v1.QueryClockContractResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "juno.clock.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "juno.clock.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("juno/clock/v1/query.proto", fileDescriptor_7da208f579d775c8) }

var fileDescriptor_7da208f579d775c8 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4f, 0x6f, 0x12, 0x41,
	0x18, 0xc6, 0x3b, 0x55, 0x9b, 0x32, 0x06, 0xff, 0x8c, 0x90, 0xc2, 0x52, 0x17, 0x98, 0x8b, 0x54,
	0xed, 0x8e, 0xb4, 0x37, 0x13, 0x63, 0x84, 0x83, 0x49, 0x4f, 0xba, 0x47, 0x2f, 0x64, 0x58, 0x26,
	0xeb, 0x56, 0x76, 0x67, 0xcb, 0x0c, 0x44, 0x62, 0xbc, 0xf4, 0xea, 0xc5, 0xe8, 0xd1, 0xc4, 0xaf,
	0xe0, 0xd7, 0xf0, 0xd8, 0xc4, 0x8b, 0x27, 0x62, 0xc0, 0x53, 0x8f, 0xfd, 0x04, 0x86, 0xd9, 0x61,
	0xcd, 0x2e, 0x8b, 0xf4, 0xe2, 0x0d, 0xde, 0xe7, 0xe1, 0x7d, 0x7f, 0xf3, 0xce, 0xc3, 0xc0, 0xf2,
	0xf1, 0x30, 0xe0, 0xc4, 0xe9, 0x73, 0xe7, 0x0d, 0x19, 0x35, 0xc9, 0xc9, 0x90, 0x0d, 0xc6, 0x56,
	0x38, 0xe0, 0x92, 0xa3, 0xfc, 0x5c, 0xb2, 0x94, 0x64, 0x8d, 0x9a, 0x46, 0xc1, 0xe5, 0x2e, 0x57,
	0x0a, 0x99, 0x7f, 0x8a, 0x4c, 0xc6, 0xae, 0xcb, 0xb9, 0xdb, 0x67, 0x84, 0x86, 0x1e, 0xa1, 0x41,
	0xc0, 0x25, 0x95, 0x1e, 0x0f, 0x84, 0x56, 0x4d, 0x87, 0x0b, 0x9f, 0x0b, 0xd2, 0xa5, 0x82, 0x91,
	0x51, 0xb3, 0xcb, 0x24, 0x6d, 0x12, 0x87, 0x7b, 0x81, 0xd6, 0x2b, 0xc9, 0xe9, 0x2e, 0x0b, 0x98,
	0xf0, 0xf4, 0x8f, 0x71, 0x11, 0xde, 0x79, 0x39, 0xc7, 0x69, 0xcf, 0xe5, 0x36, 0x0f, 0xe4, 0x80,
	0x3a, 0x52, 0xe0, 0x0f, 0x00, 0x56, 0x32, 0xea, 0x36, 0x13, 0x21, 0x0f, 0x04, 0x43, 0x7d, 0x88,
	0x1c, 0x5d, 0xec, 0xd0, 0x5e, 0x6f, 0xc0, 0x84, 0x60, 0xa2, 0x04, 0x6a, 0x57, 0x1a, 0xb9, 0xd6,
	0x93, 0xf3, 0x49, 0x75, 0x77, 0x59, 0x7d, 0xc8, 0x7d, 0x4f, 0x32, 0x3f, 0x94, 0xe3, 0x8b, 0x49,
	0xb5, 0x3c, 0xa6, 0x7e, 0xff, 0x31, 0x5e, 0x76, 0x61, 0xfb, 0xf6, 0xa2, 0xf8, 0x2c, 0xae, 0x55,
	0x60, 0x59, 0xc1, 0x1c, 0x51, 0xaf, 0xcf, 0x7a, 0x29, 0xd4, 0xaf, 0x00, 0xd6, 0x57, 0xaa, 0x31,
	0xf0, 0x18, 0x96, 0x8f, 0x95, 0xde, 0xf9, 0x5f, 0xdc, 0x3b, 0x51, 0xff, 0xf6, 0x12, 0xfd, 0x53,
	0x88, 0x96, 0x57, 0x89, 0xf6, 0xe0, 0xad, 0x74, 0x97, 0x12, 0xa8, 0x81, 0x46, 0xce, 0xbe, 0x99,
	0x5a, 0x00, 0xee, 0x41, 0x63, 0xb9, 0x41, 0x7c, 0xb2, 0xcb, 0x37, 0x42, 0x15, 0x98, 0xf3, 0x44,
	0x27, 0xe2, 0x2c, 0x6d, 0xd6, 0x40, 0x63, 0xdb, 0xde, 0xf6, 0x44, 0xb4, 0x37, 0x5c, 0xd0, 0x98,
	0x2f, 0xe8, 0x80, 0xfa, 0xc2, 0x66, 0x27, 0x43, 0x26, 0x24, 0xa6, 0x3a, 0x1f, 0x8b, 0xaa, 0x1e,
	0x7a, 0x04, 0xb7, 0x42, 0x55, 0x51, 0xa3, 0xae, 0x1f, 0x14, 0xad, 0x44, 0x8e, 0xad, 0xc8, 0xde,
	0xaa, 0x9c, 0x4f, 0xaa, 0xda, 0x78, 0x31, 0xa9, 0xe6, 0xa3, 0xe5, 0x45, 0xdf, 0xb1, 0xad, 0x85,
	0x83, 0x6f, 0x57, 0xe1, 0x35, 0x35, 0x03, 0x9d, 0x02, 0x78, 0x23, 0x79, 0x7f, 0x08, 0xa7, 0x1a,
	0x67, 0x84, 0xd2, 0xb8, 0xbf, 0xde, 0xb3, 0x00, 0xc7, 0xb5, 0xd3, 0x1f, 0xbf, 0x3f, 0x6f, 0x1a,
	0xa8, 0x44, 0x92, 0xff, 0x0a, 0x27, 0x9e, 0xf8, 0x05, 0xc0, 0x42, 0x56, 0x94, 0x50, 0x23, 0x6b,
	0x4c, 0x96, 0xd3, 0x78, 0x74, 0x59, 0x67, 0x8c, 0x75, 0x4f, 0x61, 0xd5, 0x51, 0x75, 0x15, 0x16,
	0x89, 0x6e, 0x0d, 0x7d, 0x02, 0x30, 0x9f, 0x0c, 0x52, 0x7d, 0xed, 0xe9, 0x8d, 0xbd, 0xb5, 0x96,
	0x18, 0xe4, 0x50, 0x81, 0xec, 0xa3, 0x07, 0x2b, 0x41, 0xde, 0xa5, 0xd3, 0xf6, 0x1e, 0x05, 0x70,
	0x2b, 0xba, 0xf0, 0x6c, 0x98, 0x44, 0xa2, 0x0c, 0xfc, 0x2f, 0x8b, 0xa6, 0xb8, 0xab, 0x28, 0x76,
	0x50, 0x31, 0x45, 0x11, 0x25, 0xa6, 0xf5, 0xfc, 0xfb, 0xd4, 0x04, 0x67, 0x53, 0x13, 0xfc, 0x9a,
	0x9a, 0xe0, 0xe3, 0xcc, 0xdc, 0x38, 0x9b, 0x99, 0x1b, 0x3f, 0x67, 0xe6, 0xc6, 0xab, 0x7d, 0xd7,
	0x93, 0xaf, 0x87, 0x5d, 0xcb, 0xe1, 0x3e, 0x69, 0xab, 0x67, 0xb1, 0xfd, 0x77, 0x83, 0xf3, 0x56,
	0x6f, 0x75, 0x33, 0x39, 0x0e, 0x99, 0xe8, 0x6e, 0xa9, 0x47, 0xf0, 0xf0, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x57, 0xd1, 0x9a, 0x6b, 0xa1, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ClockContracts
	ClockContracts(ctx context.Context, in *QueryClockContracts, opts ...grpc.CallOption) (*QueryClockContractsResponse, error)
	// Jailed Clock Contracts
	JailedClockContracts(ctx context.Context, in *QueryJailedClockContracts, opts ...grpc.CallOption) (*QueryJailedClockContractsResponse, error)
	// ClockContract
	ClockContract(ctx context.Context, in *QueryClockContract, opts ...grpc.CallOption) (*QueryClockContractResponse, error)
	// Params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ClockContracts(ctx context.Context, in *QueryClockContracts, opts ...grpc.CallOption) (*QueryClockContractsResponse, error) {
	out := new(QueryClockContractsResponse)
	err := c.cc.Invoke(ctx, "/juno.clock.v1.Query/ClockContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JailedClockContracts(ctx context.Context, in *QueryJailedClockContracts, opts ...grpc.CallOption) (*QueryJailedClockContractsResponse, error) {
	out := new(QueryJailedClockContractsResponse)
	err := c.cc.Invoke(ctx, "/juno.clock.v1.Query/JailedClockContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClockContract(ctx context.Context, in *QueryClockContract, opts ...grpc.CallOption) (*QueryClockContractResponse, error) {
	out := new(QueryClockContractResponse)
	err := c.cc.Invoke(ctx, "/juno.clock.v1.Query/ClockContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/juno.clock.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ClockContracts
	ClockContracts(context.Context, *QueryClockContracts) (*QueryClockContractsResponse, error)
	// Jailed Clock Contracts
	JailedClockContracts(context.Context, *QueryJailedClockContracts) (*QueryJailedClockContractsResponse, error)
	// ClockContract
	ClockContract(context.Context, *QueryClockContract) (*QueryClockContractResponse, error)
	// Params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ClockContracts(ctx context.Context, req *QueryClockContracts) (*QueryClockContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClockContracts not implemented")
}
func (*UnimplementedQueryServer) JailedClockContracts(ctx context.Context, req *QueryJailedClockContracts) (*QueryJailedClockContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JailedClockContracts not implemented")
}
func (*UnimplementedQueryServer) ClockContract(ctx context.Context, req *QueryClockContract) (*QueryClockContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClockContract not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ClockContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClockContracts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClockContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/juno.clock.v1.Query/ClockContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClockContracts(ctx, req.(*QueryClockContracts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JailedClockContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJailedClockContracts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JailedClockContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/juno.clock.v1.Query/JailedClockContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JailedClockContracts(ctx, req.(*QueryJailedClockContracts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClockContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClockContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClockContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/juno.clock.v1.Query/ClockContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClockContract(ctx, req.(*QueryClockContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/juno.clock.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "juno.clock.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClockContracts",
			Handler:    _Query_ClockContracts_Handler,
		},
		{
			MethodName: "JailedClockContracts",
			Handler:    _Query_JailedClockContracts_Handler,
		},
		{
			MethodName: "ClockContract",
			Handler:    _Query_ClockContract_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "juno/clock/v1/query.proto",
}

func (m *QueryClockContracts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClockContracts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClockContracts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryClockContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClockContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClockContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddresses) > 0 {
		for iNdEx := len(m.ContractAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractAddresses[iNdEx])
			copy(dAtA[i:], m.ContractAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryJailedClockContracts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryJailedClockContracts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryJailedClockContracts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryJailedClockContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryJailedClockContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryJailedClockContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JailedContractAddresses) > 0 {
		for iNdEx := len(m.JailedContractAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.JailedContractAddresses[iNdEx])
			copy(dAtA[i:], m.JailedContractAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.JailedContractAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClockContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClockContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClockContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClockContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClockContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClockContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsJailed {
		i--
		if m.IsJailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClockContracts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryClockContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractAddresses) > 0 {
		for _, s := range m.ContractAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryJailedClockContracts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryJailedClockContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JailedContractAddresses) > 0 {
		for _, s := range m.JailedContractAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryClockContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClockContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsJailed {
		n += 2
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClockContracts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClockContracts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClockContracts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClockContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClockContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClockContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddresses = append(m.ContractAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryJailedClockContracts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryJailedClockContracts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryJailedClockContracts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryJailedClockContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryJailedClockContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryJailedClockContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedContractAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JailedContractAddresses = append(m.JailedContractAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClockContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClockContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClockContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClockContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClockContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClockContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsJailed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
